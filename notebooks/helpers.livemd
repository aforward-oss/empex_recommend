# Helper Functions

```elixir
Mix.install([
  {:nx, "~> 0.5"}
])
```

## Our Tensor helper (Tx)

A few things that I didn't see a _nice_ way to handle, I put into a `Tx` helper (for Tensor Nx helper).

```elixir
defmodule Tx do
  def one_hot_encode(tensor, :digits) do
    one_hot_encode(tensor, 0..9 |> Enum.to_list())
  end

  def one_hot_encode(tensor, set) do
    Nx.equal(tensor, Nx.tensor(set))
  end
end
```

### One Hot Encode

To create a one_hot_encode, we load the labels, create the set of valid values and then create an equivalence using `Nx.equal`.  Here's an example of normalizing odd digitis.

```elixir
data = Nx.tensor([9, 3, 3, 5, 1]) |> Nx.new_axis(-1)
Tx.one_hot_encode(data, [1, 3, 5, 7, 9])
```

I added a `:digits` helper function to simplify the `0..9 |> Enum.to_list()`

```elixir
Tx.one_hot_encode(data, :digits)
```

If you had multiple labels, then you could _one hot_ encode them too.

```elixir
data = Nx.tensor([[9, 1, 3], [1, 3, 5]]) |> Nx.new_axis(-1)
Tx.one_hot_encode(data, :digits)
```
